"Name"     = 'G869'
"Author"   = 'P02'
"Version"  = '0.1'
"About"    = 'Gramática'

"Start Symbol" = <Program>

! -------------------------------------------------
! Character Sets
! -------------------------------------------------

{String Chars} = {Printable} + {HT} - ["\]

! -------------------------------------------------
! Terminals
! -------------------------------------------------

Identifier    = {Letter}({AlphaNumeric} | '_')*
StringLiteral = '"' ( {String Chars} | '\' {Printable} )* '"'
Number = {Digit}{Digit}*
! -------------------------------------------------
! Rules
! -------------------------------------------------

! The grammar starts below

<Program> ::= <ConstanteGlobal> <Classe> <Main> | <ConstanteGlobal> <Main>
! Palavras Reservadas
! <PalavraReservada> ::= 'class' | 'final' | 'if' | 'else' | 'for' | 'scan' | 'print' | 'int' | 'float' | 'bool' | 'true' | 'false' | 'string'
! Tipos de Variáveis
<VarTipo> ::= 'int' | 'float' | 'bool' | 'string'
! Constante Global
<ConstanteGlobal> ::= 'final' <VarTipo> Identifier ';' <ConstanteGlobal> | 'final' <Vetor> |
! Classe
<Classe> ::= class Identifier <ClassePai> '{' <ConteudoClasse> '}'
<ConteudoClasse> ::= <Var><ConteudoClasse> | <Metodo><ConteudoClasse> |
<ClassePai> ::= ':' Identifier |
! Declaração de Atributos e Variáveis
<Var> ::= <VarTipo> Identifier <AuxVar> ';' | Identifier Identifier <AuxVar> ';' | <Vetor>
<AuxVar> ::= ',' Identifier <AuxVar> |
! Métodos
<Metodo> ::= <VarTipo> Identifier '(' <Param2> ')' '{' <Comando> '<:' <RetornoMetodo>':>' '}'
<RetornoMetodo> ::= Identifier | StringLiteral | Number | 'true' | 'false'
! Comandos
<Comando> ::= <Var><Comando> | <Acesso><Comando> | <Laco><Comando> | <CondicionalIf><Comando> | <print><Comando> | <scan><Comando> | <OperadorAritmetico><Comando> | <Expressao><Comando> |
! Acessos
<Acesso> ::= Identifier <AuxAcesso1> ';'
<AuxAcesso1> ::= ':' <AuxAcesso2><AuxAcesso1> | 
<AuxAcesso2> ::= Identifier | Identifier '(' <Param> ')' | Identifier'['Number']'<VetorAux>
! Parametros
<Param> ::=  | Identifier <AuxParam>
<AuxParam> ::= ',' Identifier <AuxParam> | 
! Parametros para declaração de métodos
<Param2> ::=  | <VarTipo> Identifier <AuxParam2> | Identifier Identifier <AuxParam2>
<AuxParam2> ::= ',' <VarTipo> Identifier <AuxParam2> | ',' Identifier Identifier <AuxParam2> | 
! Vetores
<Vetor> ::= <VarTipo>'['Number']' <VetorAux> Identifier ';'
<VetorAux> ::= '['Number']'<VetorAux> |
! Print
<print> ::= 'print' '(' <imprimir> ')' ';'
<imprimir> ::= StringLiteral ',' <var> | StringLiteral | <var> 
! Scan
<scan> ::= 'scan' '(' Identifier <id> ')' ';'
<id>::= ','  Identifier <id> |
! Main
<Main> ::= class 'Main' '{' 'main' '(' ')' '{' <Comando> '<:' <RetornoMain> ':>' '}' '}'
<RetornoMain> ::= Identifier | false | true
! Expressões
<Expressao> ::= <Expressao> ',' <Op Atribuicao> | <Op Atribuicao>
<Op Atribuicao> ::= <Op If> '=' <Op Atribuicao> | <Op If>
<Op If> ::= <Op If> '||' <Op And> | <Op And>
<Op And> ::= <Op And> '&&' <Op Igualdade> | <Op Igualdade>
<Op Igualdade> ::= <Op Igualdade> '!=' <Op Compararacao> | <Op Compararacao>
<Op Compararacao> ::= <Op Compararacao> '<'  <Op Adicao>
               | <Op Compararacao> '>'  <Op Adicao>
               | <Op Compararacao> '<=' <Op Adicao>
               | <Op Compararacao> '>=' <Op Adicao>
               | <Op Adicao>
<Op Adicao> ::= <Op Adicao> '+' <Op Multiplicacao> | <Op Adicao> '-' <Op Multiplicacao> | <Op Multiplicacao>
<Op Multiplicacao> ::= <Op Multiplicacao> '*' <Op Unitario>
               | <Op Multiplicacao> '/' <Op Unitario>
               | <Op Multiplicacao> '%' <Op Unitario>
               | <Op Unitario>
<Op Unitario> ::= '!'   <Op Unitario>
               | '~'    <Op Unitario>   
               | '-'    <Op Unitario>
               | '*'    <Op Unitario>
               | '&'    <Op Unitario>  
! Operadores
<OperadorAritmetico> ::= '+'|'-'|'*'|'/'|'%'
<OperadorRelacional> ::= '!='|'='|'<'|'<='|'>'|'>='
<OperadorLogico> ::= '&&' | '||' | '!'
! Laco
<TipoVariavel> ::= StringLiteral | Number | 'true' | 'false'         
<Incremento> ::= Identifier '=' Identifier <OperadorAritmetico> Number
<Laco> ::= 'for' '(' <Atribuicao> ';' <Condicao> ';' <Incremento> ')' '{' <Comando> '}'        
<Atribuicao> ::= Identifier '=' <TipoVariavel> |
<AuxCondicao> ::= <OperadorLogico> <Condicao> |
<Condicao> ::= Identifier <OperadorRelacional> <TipoVariavel> <AuxCondicao>
! Condicionais
<CondicionalIf> ::= 'if' '(' <Condicao> ')' '{' <Comando> '}' <CondicionalElse>
<CondicionalElse> ::= 'else' '{' <Comando> '}' |
