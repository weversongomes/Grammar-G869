"Name"     = 'G869'
"Author"   = 'Weverson'
"Version"  = '0.1'
"About"    = 'Uma gramática'

"Start Symbol" = <Program>

! -------------------------------------------------
! Character Sets
! -------------------------------------------------

{String Chars} = {Printable} + {HT} - ["\]

! -------------------------------------------------
! Terminals
! -------------------------------------------------

Identifier    = {Letter}({AlphaNumeric} | '_')*
StringLiteral = '"' ( {String Chars} | '\' {Printable} )* '"'
Number = {Digit}{Digit}*
! -------------------------------------------------
! Rules
! -------------------------------------------------

! The grammar starts below

<Program> ::= <ConstanteGlobal> <Classe> <Main> | <ConstanteGlobal> <Main>
! Palavras Reservadas
<PalavraReservada> ::= 'class' | 'final' | 'if' | 'else' | 'for' | 'scan' | 'print' | 'int' | 'float' | 'bool' | 'true' | 'false' | 'string'
! Tipos de Variáveis
<VarTipo> ::= 'int' | 'float' | 'bool' | 'string'
! Constante Global
<ConstanteGlobal> ::= 'final' <VarTipo> Identifier ';' <ConstanteGlobal> | 
! Classe
<Classe> ::= class Identifier <ClassePai> '{' <ConteudoClasse> '}'
<ConteudoClasse> ::= <Var><ConteudoClasse> | <Metodo><ConteudoClasse> |
<ClassePai> ::= ':' Identifier |
! Atributos e Variáveis
<Var> ::= <VarTipo> Identifier <AuxVar> ';' | Identifier Identifier <AuxVar> ';'
<AuxVar> ::= ',' Identifier <AuxVar> |
! Métodos
<Metodo> ::= <VarTipo> Identifier '(' <Param2> ')' '{' <Comando> '<:' <RetornoMetodo>':>' '}'
<RetornoMetodo> ::= Identifier | StringLiteral | Number | 'true' | 'false'
! Comandos
<Comando> ::= <Acesso><Comando> | 'laco'<Comando> |
! Acessos
<Acesso> ::= Identifier <AuxAcesso1> ';' | Identifier'['Number']'<AuxAcesso1> ';'
<AuxAcesso1> ::= ':' <AuxAcesso2><AuxAcesso1> | 
<AuxAcesso2> ::= Identifier | Identifier '(' <Param> ')' | Identifier'['Number']'<VetorAux>
! Parametros
<Param> ::=  | Identifier <AuxParam>
<AuxParam> ::= ',' Identifier <AuxParam> | 
! Parametros para declaração de métodos
<Param2> ::=  | <VarTipo> Identifier <AuxParam2> | Identifier Identifier <AuxParam2>
<AuxParam2> ::= ',' <VarTipo> Identifier <AuxParam2> | ',' Identifier Identifier <AuxParam2> | 
! Vetores
<Vetor> ::= <VarTipo>'['Number']' <VetorAux> Identifier ';'
<VetorAux> ::= '['Number']'<VetorAux> |
! Print
<print> ::= 'print' '(' <imprimir>')' ';' | 
<imprimir> ::= StringLiteral ',' <var> | StringLiteral | <var> 
! Scan
<scan> ::= 'scan' '(' Identifier <id> ')' ';'|
<id>::= ','  Identifier <id> |
! Main
<Main> ::= class 'Main' '{' 'main' '(' ')' '{' <Comando> '<:' <RetornoMain> ':>' '}' '}'
<RetornoMain> ::= Identifier | false | true

!Condicionais
!obs.: eu supus a existenca de op_relacional, mas ainda nao criaram essa. Fiz a producao permitindo que o if possa ser ou nao acompanhado por um else

<CondicionalIf> ::= 'if' '('<op_relacional> ')' '{' <Comando>|<CondicionalIf>|<print>|<RetornoMetodo>|<Var> '}'<CondicionalElse>
<CondicionalElse> ::= 'else' '{' <Comando>|<Condicional>|<print>|<RetornoMetodo>|<Var> '}'|





